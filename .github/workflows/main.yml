name: Ngrok and SSH Connection

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract Ngrok
      run: Expand-Archive ngrok.zip

    - name: Authenticate Ngrok
      run: .\ngrok\ngrok.exe authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

    - name: Start Ngrok Tunnel
      run: start /B .\ngrok\ngrok.exe tcp 3389
      shell: cmd

    - name: Wait for Ngrok to Start
      run: Start-Sleep -Seconds 10

    - name: Get Ngrok URL
      id: ngrok
      run: |
        $ngrokURL = Get-Content ngrok.log | Select-String "url=https://" | ForEach-Object { $_.ToString().Split('=')[1] }
        echo "Ngrok URL: $ngrokURL"
        echo "::set-output name=ngrok_url::$ngrokURL"
      shell: pwsh

    - name: Establish SSH Connection
      run: |
        ssh -L 33389:localhost:3389 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null runneradmin@${{ steps.ngrok.outputs.ngrok_url }} -p 22 -N
